import numpy as np
from keras.models import load_model
from keras import backend as K
# from pwn import *
# import urllib2


def get_proba(profile):
        # print(profile)
        np.set_printoptions(suppress=True)
        # reshape profile
        prof_h = profile.split('0x')
        ip = [int(_, 16) for _ in prof_h[1:]]
        ip = np.array(ip, dtype='float32')/255
        ip = ip.reshape([1,28,28,1])
        # load model
        model = load_model('./keras_model')
        predicted = model.predict(ip)[0][1]
        return predicted

# load keras
model = load_model('./keras_model')

# >>> dir(model) 
# [... 'stateful', 'summary', 'supports_masking', ...]
# >>> model.summary()
# _________________________________________________________________
# Layer (type)                 Output Shape              Param #   
# =================================================================
# conv2d_14 (Conv2D)           (None, 26, 26, 32)        320       
# _________________________________________________________________
# max_pooling2d_9 (MaxPooling2 (None, 13, 13, 32)        0         
# _________________________________________________________________
# flatten_9 (Flatten)          (None, 5408)              0         
# _________________________________________________________________
# dense_17 (Dense)             (None, 128)               692352    
# _________________________________________________________________
# dense_18 (Dense)             (None, 2)                 258       
# =================================================================
# Total params: 692,930
# Trainable params: 692,930
# Non-trainable params: 0
# _________________________________________________________________

# model.summary() shows that the model is a convolutional neural network. which accepts input in shape(1,28,28) according to get_proba
# Also the model outputs two values = [probability_of_non_legitness, and probability_of_legitness]
# You can use given profile to generate an Adversarial profile which will trick the model into authenticating itself.

profile_given = '0x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x80x750xfe0xdc0x590x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00xd0x5f0xd40xfd0xfd0xfd0x9d0x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x100x5f0xd10xfd0xfd0xfd0xf50x7d0x120x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x280x600xce0xfd0xfe0xfd0xfd0xc60x400x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x2c0xb60xf00xfd0xfd0xfd0xfe0xfd0xc60x180x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00xf0x3c0x3c0xa80xfd0xfd0xfe0xc80x170x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x460xf70xfd0xfd0xf50x150x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x4b0xcf0xfd0xfd0xcf0x5c0x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x4f0xdb0xfd0xfd0xfd0x8a0x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x690xfa0xfd0xfd0xfd0x220x10x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x5f0xfe0xfe0xfe0xfe0x5e0x00x00x00x00x00x30xd0xd0xd0x80x00x00x00x00x00x00x00x00x00x00x00x00x6b0xfd0xfd0xfd0xcc0xf0x00x00x00x00x150xa60xfd0xfd0xfd0xd40x190x00x00x00x00x00x00x00x00x00x00x210xd90xfd0xfd0x840x400x00x00x120x2b0x9d0xab0xfd0xfd0xfd0xfd0xfd0xa00x20x00x00x00x00x00x00x00x00x30xa60xfd0xfd0xf20x310x110x310x9e0xd20xfe0xfd0xfd0xfd0xfd0xfd0xfd0xfd0xfd0xb0x00x00x00x00x00x00x00x00xa0xe30xfd0xfd0xcf0xf0xac0xfd0xfd0xfd0xfe0xf70xc90xfd0xd20xd20xfd0xfd0xaf0x40x00x00x00x00x00x00x00x00xa0xe40xfd0xfd0xe00x570xf20xfd0xfd0xb80x3c0x360x90x3c0x230xb60xfd0xfd0x340x00x00x00x00x00x00x00x00x00xd0xfd0xfd0xfd0xfd0xe70xfd0xfd0xfd0x5d0x560x560x560x6d0xd90xfd0xfd0x860x50x00x00x00x00x00x00x00x00x00x20x730xfd0xfd0xfd0xfd0xfd0xfd0xfd0xfd0xfe0xfd0xfd0xfd0xfd0xfd0x860x50x00x00x00x00x00x00x00x00x00x00x00x30xa60xfd0xfd0xfd0xfd0xfd0xfd0xfd0xfe0xfd0xfd0xfd0xaf0x340x50x00x00x00x00x00x00x00x00x00x00x00x00x00x70x230x840xe10xfd0xfd0xfd0xc30x840x840x840x6e0x40x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x0' 
# profile_given = '0x0'*784
prof_h = profile_given.split('0x')
prof_num = [int(_, 16) for _ in prof_h[1:]]
# create numpy array of profile and rehsape it as shown in the get_prob.py
profile_given_np = np.array(prof_num, dtype='float32')/255
profile_ip = profile_given_np.reshape(1,28,28,1)

# get layers
ip_layer = model.layers[0].input
op_layer = model.layers[-1].output



# make a copy to experiment on
profile_hacked = np.copy(profile_ip)


# get probability from last layer of model and gradients to perform gradient descend
cost_function = op_layer[0, 1]
gradient_function = K.gradients(cost_function, ip_layer)[0]

# select learning rate (how fast target will change)
lr = 0.1

# function to return gradients and cost
get_cost_and_grad = K.function([ip_layer, K.learning_phase()], [cost_function, gradient_function])
cost = 0.0

# gradient descend untill we get desired cost/probability
while cost < 0.999:
    cost, gradients = get_cost_and_grad([profile_hacked, 0])
    profile_hacked += gradients * lr
    profile_hacked = np.clip(profile_hacked, 0, 1.0)
    print("probability of authenticity for hacked profile: {:.8}%".format(cost))

print("probability of authenticity for hacked profile: {:.8}%".format(model.predict(profile_hacked)[0][1]))


# generte profile
profile_hacked_hex = ''.join([hex(int(_)) for _ in profile_hacked.reshape(28*28)*255])
print("probab :{:.4}".format(get_proba(profile_hacked_hex)))

# submit hacked profile and get flag
# s = remote('ml.amdocs.drctf.com',9999)
# s.sendline(profile_hacked_hex)
# print s.recvline()
# s.close()
# res = urllib2.urlopen("http://ml.amdocs.drctf.com/predict?profile="+profile_hacked_hex).read()
# print res

# below is one example solution
# solution = '0x00x00x20x00x00x10x10x00x00x20x00x00x00x20x00x00x00x00x20x10x40x40x20x00x00x10x20x00x00x00x30x00x00x30x20x00x00x20x10x00x00x20x00x70xa0x40x60xe0xb0x30xc0x00x00x30x30x00x00x00x00x00x00x00x00x00x00x20x40x00x00x00x00x00x00x00x750xef0xcc0x580x00x00x00x00x00x20x00x00x00x20x00x00x00x20x00x30xb0x00x00x00x30x00x4c0xd30xf90xed0xf30x8f0x00x30x00x00x00x20x10x00x00x00x40x00x00x00x00x00x10x00xa0xf0x710xe60xff0xff0xff0xff0x990x180x00x10x140x00x00x00x00x00x00x00x40x00x00x00x00x00x00x1b0x670xe40xff0xff0xff0xff0xc60x430x110x00x00x00xa0x00x00x20x00x10x30x00x00x00xc0x00x70x640xba0xff0xff0xf30xf90xff0xff0xd50xa0x00x00x00x00x00x30x00x10x30x00x00x20x00x00x00xd0x00x00x2b0x220x90xab0xf90xff0xff0xc60x60x00x00x00x00x00x00x10x00x00x20x00x00x00x00x00x00x00x00x00x00x00x310xf10xfe0xff0xf20xa0x00x00x40x00x90x00x00x00x00x00x60x10x00x00x00x00x00x00x00x90x00x4a0xe90xff0xfd0xcf0x500x00x00x30x30x20x30x30x30xe0x00x00x20x00x00x10x30x00x00x00x10x230x770xe20xf60xe70xed0x890x00x00x00x30x40x50x60x30x30x80xb0x00x30x00x00x00x70x30x1f0x10x00x720xff0xfd0xfd0xf60x190x00x00x00x10x00x00x20x00x130x230x360x50x10x40x00x00x00xd0x30x140x30x3b0xfd0xef0xf00xfd0x7b0x340x550x320x530x00x70x00x50x90x1a0x1c0x1d0x00x00x00x00x00x00xf0x70x300x100x4c0xf90xf20xff0xf50x110x00x220x00x100x00xb60xfb0xff0xe10xa70x250x1b0x70x00x20x00x00x20xb0x80x170x2a0xa30xea0xe80x810x380x20x00x170x110xb50xe80xff0xf70xf10xde0xd50x900xd0x00x50x50x00x00x20x90x180x2b0x820xd30xf70xe50x2e0x00x80xf40xff0xff0xff0xff0xff0xf80xff0xef0xe00xc40x80x00x00x30x00x00x40xb0x100x150xb10xec0xfc0xc70x190xb70xff0xff0xff0xff0xea0xe20xfc0xc90xcf0xee0xe30x900xf0x40x00x10x00x00x20x70x190x250xba0xeb0xe50xcc0x640xf60xff0xff0xd70x00x00x00x2b0x3e0xb00xde0xcc0x4b0x110x40x40x30x00x00x00x10x100x1b0xd10xea0xe90xe90xe10xfd0xff0xff0x500x520x410x460x6b0xbe0xfb0xec0x6a0x130xe0x40x20x00x00x00x20x10x110x2b0x8c0xdf0xe00xf30xf30xf40xf40xf90xff0xee0xe80xcc0xd60xd10xeb0xa90x200xd0xb0x00x30x30x00x00x40x00x00x20x1e0xa60xe30xee0xec0xf20xfb0xf20xf50xe40xf80xff0xf30xaa0x3e0x200x10x00x50x00x30x40x00x00x40x10x00x00x1c0x410x4e0x920xd50xef0xf30xfe0xca0x8f0x990xa30x940x210x00x40x70xb0x00x00x00x10x00x00x00x00x00x00x60x60xc0x220xe0x20x20x00xa0x00x00x00xc0x00x00x00xb0x00x00x10x50x10x00x00x20x10x00x10x70x00x40xa0x70x90x20x00x00x00x00x70xe0x100x00x00x40x00x00x00x30x00x00x00x40x10x00x00x50x00x00x00x80x00x00x00xf0x00x00x00x00x20x00x00x10x00x00x00x10x00x00x00x30x00x00x00x40x00x00x50x90x00x00x00x30x00x60x00x00x10x00x00x40x00x00x30x20x00x00x00x00x20x00x00x00x00x00x00x00x00x00x00x00x10x60x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x10x00x00x10x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x0'
